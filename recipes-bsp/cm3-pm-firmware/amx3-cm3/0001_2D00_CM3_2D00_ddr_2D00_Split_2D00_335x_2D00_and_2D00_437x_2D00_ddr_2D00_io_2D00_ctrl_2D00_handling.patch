From 2a2ebccd3f109afa24c2cef76daf6e60a1959230 Mon Sep 17 00:00:00 2001
From: Dave Gerlach <d-gerlach@ti.com>
Date: Tue, 10 Nov 2015 11:21:54 -0600
Subject: [CM3 PATCH] CM3: ddr: Split 335x and 437x ddr io ctrl handling

It seems that some of the ddr io ctrl handling for am335x got wiped out
during the development on am437x io ctrl values so this patch restores
am335x sequence separately and splits am437x io ctrl sequence into its
own function. Also, do a proper save of context and restore during
resume rather than writing in fixed values.

Signed-off-by: Dave Gerlach <d-gerlach@ti.com>
---
 src/pm_services/ddr.c | 144 ++++++++++++++++++++++++++++++++------------------
 1 file changed, 92 insertions(+), 52 deletions(-)

diff --git a/src/pm_services/ddr.c b/src/pm_services/ddr.c
index 224b45a..34a28aa 100644
--- a/src/pm_services/ddr.c
+++ b/src/pm_services/ddr.c
@@ -21,31 +21,83 @@
  * Values recommended by the HW team. These change the pulls
  * on certain IOs of DATA and CMD macros
  */
-#define SUSP_IO_PULL_DATA		0x3FF00003
-#define SUSP_IO_PULL_CMD1_DDR3		0x08000000
-#define SUSP_IO_PULL_CMD2_DDR3		0xF7FFFFFF
-#define SUSP_IO_PULL_CMD1_LPDDR2	0x00000000
-#define SUSP_IO_PULL_CMD2_LPDDR2	0xFFFFFFFF
-#define RESUME_IO_PULL_DATA_DDR3	0x84
-#define RESUME_IO_PULL_CMD_DDR3		0x0
-#define RESUME_IO_PULL_DATA_LPDDR2	0x20000294
-#define RESUME_IO_PULL_CMD_LPDDR2	0x0
+#define AM335X_SUSP_IO_PULL_DATA      0x3FF00003
+#define AM335X_SUSP_IO_PULL_CMD1      0xFFE0018B
+#define AM335X_SUSP_IO_PULL_CMD2      0xFFA0098B
+
+#define AM437X_SUSP_IO_PULL_DATA	0x3FF00003
+#define AM437X_SUSP_IO_PULL_CMD1_DDR3	0x08000000
+#define AM437X_SUSP_IO_PULL_CMD2_DDR3	0xF7FFFFFF
+#define AM437X_SUSP_IO_PULL_CMD1_LPDDR2	0x00000000
+#define AM437X_SUSP_IO_PULL_CMD2_LPDDR2	0xFFFFFFFF
+
+struct ddr_io_context {
+	unsigned long cmd0_ioctrl;
+	unsigned long cmd1_ioctrl;
+	unsigned long cmd2_ioctrl;
+
+	unsigned long data0_ioctrl;
+	unsigned long data1_ioctrl;
+	unsigned long data2_ioctrl;
+	unsigned long data3_ioctrl;
+};
+
+static struct ddr_io_context io_ctx;
+
+void ddr_io_save_context(void)
+{
+	io_ctx.cmd0_ioctrl = __raw_readl(DDR_CMD0_IOCTRL);
+	io_ctx.cmd1_ioctrl = __raw_readl(DDR_CMD1_IOCTRL);
+	io_ctx.cmd2_ioctrl = __raw_readl(DDR_CMD2_IOCTRL);
 
+	io_ctx.data0_ioctrl = __raw_readl(DDR_DATA0_IOCTRL);
+	io_ctx.data1_ioctrl = __raw_readl(DDR_DATA1_IOCTRL);
 
+	if (soc_id == AM43XX_SOC_ID) {
+		io_ctx.data2_ioctrl = __raw_readl(DDR_DATA2_IOCTRL);
+		io_ctx.data3_ioctrl = __raw_readl(DDR_DATA3_IOCTRL);
+	}
+}
 
-void ddr_io_suspend(void)
-{
+void ddr_am335x_io_suspend(void) {
 	unsigned int var;
+
+	ddr_io_save_context();
+
 	/* mddr mode selection required only for PG1.0 */
-	if (soc_id == AM335X_SOC_ID && soc_rev == AM335X_REV_ES1_0) {
-		var = __raw_readl(DDR_IO_CTRL_REG);
-		var |= DDR_IO_MDDR_SEL;
-		__raw_writel(var, DDR_IO_CTRL_REG);
+	if (soc_rev == AM335X_REV_ES1_0 && (mem_type == MEM_TYPE_DDR2 ||
+	    mem_type == MEM_TYPE_DDR3)) {
+	        var = __raw_readl(DDR_IO_CTRL_REG);
+	        var |= DDR_IO_MDDR_SEL;
+	        __raw_writel(var, DDR_IO_CTRL_REG);
 	}
 
 	/* Weak pull down for DQ, DM */
-	__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA0_IOCTRL);
-	__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA1_IOCTRL);
+	__raw_writel(AM335X_SUSP_IO_PULL_DATA, DDR_DATA0_IOCTRL);
+	__raw_writel(AM335X_SUSP_IO_PULL_DATA, DDR_DATA1_IOCTRL);
+
+        /* Weak pull down for macro CMD0/1 */
+        __raw_writel(AM335X_SUSP_IO_PULL_CMD1, DDR_CMD0_IOCTRL);
+        __raw_writel(AM335X_SUSP_IO_PULL_CMD1, DDR_CMD1_IOCTRL);
+
+        /*
+	 * Weak pull down for macro CMD2
+	 * exception: keep DDR_RESET pullup
+	 */
+        __raw_writel(AM335X_SUSP_IO_PULL_CMD2, DDR_CMD2_IOCTRL);
+}
+
+void ddr_am437x_io_suspend(void)
+{
+	unsigned int var;
+
+	ddr_io_save_context();
+
+	/* Weak pull down for DQ, DM */
+	__raw_writel(AM437X_SUSP_IO_PULL_DATA, DDR_DATA0_IOCTRL);
+	__raw_writel(AM437X_SUSP_IO_PULL_DATA, DDR_DATA1_IOCTRL);
+	__raw_writel(AM437X_SUSP_IO_PULL_DATA, DDR_DATA2_IOCTRL);
+	__raw_writel(AM437X_SUSP_IO_PULL_DATA, DDR_DATA3_IOCTRL);
 
 	if (mem_type == MEM_TYPE_LPDDR2) {
 		/* Configure LPDDR2 Dynamic power down */
@@ -53,27 +105,26 @@ void ddr_io_suspend(void)
 		var |= DYNAMIC_PWR_DOWN;
 		__raw_writel(var, EMIF_SDRAM_CONFIG_EXT);
 
-		/* Additional weak pull down for DQ, DM */
-		__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA2_IOCTRL);
-		__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA3_IOCTRL);
-
-		__raw_writel(SUSP_IO_PULL_CMD1_LPDDR2, DDR_CMD1_IOCTRL);
-		__raw_writel(SUSP_IO_PULL_CMD2_LPDDR2, DDR_CMD2_IOCTRL);
+		__raw_writel(AM437X_SUSP_IO_PULL_CMD1_LPDDR2, DDR_CMD1_IOCTRL);
+		__raw_writel(AM437X_SUSP_IO_PULL_CMD2_LPDDR2, DDR_CMD2_IOCTRL);
 	} else if (mem_type ==  MEM_TYPE_DDR3) {
 		/* Weak pull down for macro CMD0/1 */
-		__raw_writel(SUSP_IO_PULL_CMD1_DDR3, DDR_CMD1_IOCTRL);
+		__raw_writel(AM437X_SUSP_IO_PULL_CMD1_DDR3, DDR_CMD1_IOCTRL);
 
-		if (soc_id == AM43XX_SOC_ID) {
-			__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA2_IOCTRL);
-			__raw_writel(SUSP_IO_PULL_DATA, DDR_DATA3_IOCTRL);
-		}
 		/*
 		 * Weak pull down for macro CMD2
 		 * exception: keep DDR_RESET pullup
 		 */
-		__raw_writel(SUSP_IO_PULL_CMD2_DDR3, DDR_CMD2_IOCTRL);
+		__raw_writel(AM437X_SUSP_IO_PULL_CMD2_DDR3, DDR_CMD2_IOCTRL);
 	}
+}
 
+void ddr_io_suspend(void)
+{
+	if (soc_id == AM335X_SOC_ID)
+		ddr_am335x_io_suspend();
+	else if (soc_id == AM43XX_SOC_ID)
+		ddr_am437x_io_suspend();
 }
 
 void ddr_io_resume(void)
@@ -81,35 +132,24 @@ void ddr_io_resume(void)
 	unsigned int var;
 
 	/* mddr mode selection required only for PG1.0 */
-	if (soc_id == AM335X_SOC_ID && soc_rev == AM335X_REV_ES1_0) {
+	if (soc_id == AM335X_SOC_ID && soc_rev == AM335X_REV_ES1_0 &&
+	    (mem_type == MEM_TYPE_DDR2 || mem_type == MEM_TYPE_DDR3)) {
 		var = __raw_readl(DDR_IO_CTRL_REG);
 		var &= ~DDR_IO_MDDR_SEL;
 		/* Take out IO of mDDR mode */
 		__raw_writel(var, DDR_IO_CTRL_REG);
 	}
 
-	/* Different sleep sequences for memory types */
-	if (mem_type == MEM_TYPE_LPDDR2) {
-		/* Disable the pull for DATA3/2/1/0 */
-		__raw_writel(RESUME_IO_PULL_DATA_LPDDR2, DDR_DATA3_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_DATA_LPDDR2, DDR_DATA2_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_DATA_LPDDR2, DDR_DATA1_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_DATA_LPDDR2, DDR_DATA0_IOCTRL);
-		/* Disable the pull for CMD1/2 */
-		__raw_writel(RESUME_IO_PULL_CMD_LPDDR2, DDR_CMD1_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_CMD_LPDDR2, DDR_CMD2_IOCTRL);
-	} else if (mem_type == MEM_TYPE_DDR3) {
-		/* Disable the pull for CMD2/1/0 */
-		__raw_writel(RESUME_IO_PULL_CMD_DDR3, DDR_CMD2_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_CMD_DDR3, DDR_CMD1_IOCTRL);
-		/* Disable the pull for DATA1/0 */
-		__raw_writel(RESUME_IO_PULL_DATA_DDR3, DDR_DATA0_IOCTRL);
-		__raw_writel(RESUME_IO_PULL_DATA_DDR3, DDR_DATA1_IOCTRL);
-
-		if (soc_id == AM43XX_SOC_ID) {
-			__raw_writel(RESUME_IO_PULL_DATA_DDR3, DDR_DATA2_IOCTRL);
-			__raw_writel(RESUME_IO_PULL_DATA_DDR3, DDR_DATA3_IOCTRL);
-		}
+	__raw_writel(io_ctx.cmd0_ioctrl, DDR_CMD0_IOCTRL);
+	__raw_writel(io_ctx.cmd1_ioctrl, DDR_CMD1_IOCTRL);
+	__raw_writel(io_ctx.cmd2_ioctrl, DDR_CMD2_IOCTRL);
+
+	__raw_writel(io_ctx.data0_ioctrl, DDR_DATA0_IOCTRL);
+	__raw_writel(io_ctx.data1_ioctrl, DDR_DATA1_IOCTRL);
+
+	if (soc_id == AM43XX_SOC_ID) {
+		__raw_writel(io_ctx.data2_ioctrl, DDR_DATA2_IOCTRL);
+		__raw_writel(io_ctx.data3_ioctrl, DDR_DATA3_IOCTRL);
 	}
 }
 
-- 
2.6.0

